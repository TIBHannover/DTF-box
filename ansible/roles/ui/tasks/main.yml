---
# - name: uninstall apt
#   shell: pkill apt
#   become: true
 
# - name: uninstall apt-get
#   shell: pkill apt-get
#   become: true 


- name: install curl
  shell: apt-get install -y curl
  become: true  

- name: Download nodejs
  shell: 'curl -sL {{ node_download_url }} -o /tmp/nodesource_setup.sh && bash /tmp/nodesource_setup.sh'
  become: true 

- name: Update apt
  apt: update_cache=yes state=present
  become: true

- name: install nodejs
  shell: apt-get install -y nodejs
  become: true  

- name: install git
  apt:
    pkg:
     - acl
     - git
     - wget
     - "jq"
     - python3-psycopg2 
     - python3-pip
     - adduser
     - net-tools
     - lsof
    state: present
    update_cache: true 
  become: true

- name: check whoami
  shell: whoami

- name: Delete already existing directory
  file:
    path: "{{ angular_home_dir }}"
    state: absent
  become: true  

- name: Creates directory
  file:
    path: "{{ angular_home_dir }}"
    state: directory
    owner: '{{work_user}}'
  become: true

- name: Download the frontend UI code from the gitrepo of DSpace
  git:
    repo: "{{ dtf_angular_git_url }}"
    dest: "{{ angular_home_dir }}"
    version: "{{ dtf_angular_version }}"
    force: yes
    clone: yes
    update: yes
    
- name: Update permissions after code is cloned
  file:
    path: "{{ angular_home_dir }}"
    state: directory
    owner: '{{work_user}}'
    recurse: true
  become: true  

- name: install angular cli
  npm:
      name: "@angular/cli"
      version: '11.2.15'
      global: yes
  become: true

- name: install npm pkgs
  npm:
      name: nodemon
      global: yes
  become: true

- name: Install yarn
  npm:
    name: yarn
    global: yes
  become: true

- name: Install cross-env
  npm:
    name: cross-env   
    global: yes
  become: true

- name: Install pm2
  npm:
    name: pm2   
    global: yes
  become: true
   
- name: stop all prior pm2 processes
  shell: pm2 stop all &

# - name: Install required packages
#   apt:
#     name:
#       - gnupg2
#       - wget
#       - acl
#       - ncat
#       - postgresql
#       - postgresql-contrib
#       - python3-pip
#       - libpq-dev
#       - python-psycopg2
#     state: absent
#   become: true  

- name: Install required packages
  apt:
    name:
      - gnupg2
      - wget
      - acl
      - ncat
      - postgresql
      - postgresql-contrib
      - python3-pip
      - libpq-dev
      - python-psycopg2
    state: latest
  become: true

- pip: {name: psycopg2, state: present}
  vars:
    ansible_python_interpreter: /usr/bin/python3  
   


- name: start postgres
  shell: systemctl start postgresql.service
  become: true

- name: start postgres
  shell: systemctl status postgresql.service
  become: true

- name: start postgres
  shell: systemctl enable postgresql.service
  become: true

- name: Modify pg_hba.conf
  ansible.builtin.replace:
    path: /etc/postgresql/11/main/pg_hba.conf
    regexp: "md5"
    replace: "trust"
  become: true

- name: Modify pg_hba.conf
  ansible.builtin.replace:
    path: /etc/postgresql/11/main/pg_hba.conf
    regexp: "peer"
    replace: "trust"
  become: true

- name: check conf
  shell: cat /etc/postgresql/11/main/pg_hba.conf
  become: true

- name: start postgres
  shell: systemctl reload postgresql.service
  become: true

- name: create non-existing 'postgres' role in db
  become: true
  become_method: su
  become_user: "{{ remote_server_user | default(work_user)}}"
  postgresql_user:
    name: "{{ postgres_user }}"
    password: "{{ postgres_password }}"
    role_attr_flags: CREATEDB,SUPERUSER
    state: present

- name: Create a super database
  become: true
  become_method: su
  become_user: "{{ remote_server_user | default(work_user)}}"
  postgresql_db:
    name: sammy
    login_user: "{{ postgres_user}}"
    login_password: "{{ postgres_password }}"  


- name: Ensure PostgreSQL is listening on *
  lineinfile:
    dest: /etc/postgresql/11/main/postgresql.conf
    regexp: '^listen_addresses\s*='
    line: "listen_addresses='*'"
    state: present
  become: true

- name: check conf db
  shell: cat /etc/postgresql/11/main/postgresql.conf
  become: true

- name: Add new configuration to "pg_hba.conf"
  ansible.builtin.lineinfile:
    path: /etc/postgresql/11/main/pg_hba.conf
    line: all sammy postgres 127.0.0.1 255.255.255.255 md5
    insertbefore: BOF
    state: present
  become: true

- name: start postgres
  shell: systemctl reload postgresql.service
  become: true    
  
- name: run local UI DSpace server
  shell: yarn install
  args:
    chdir: "{{ angular_home_dir }}/DtfTIBClient/"
  become: true
  
- name: run local UI DSpace server
  shell: ng serve --host 0.0.0.0 --port 4200 --configuration=development &
  args:
    chdir: "{{ angular_home_dir }}/DtfTIBClient/"
  become: true  

- name: run local UI DSpace server
  shell: mvn -U clean install -DskipTests
  args:
    chdir: "{{ angular_home_dir }}/DtfTIB/"
  become: true

- name: run local UI DSpace server
  shell: mvn spring-boot:run &
  args:
    chdir: "{{ angular_home_dir }}/DtfTIB/"
  become: true

- name: non root
  shell: 'env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u {{work_user}} --hp /home/{{work_user}}'
  become: true


